# https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
# https://www.apeth.com/nonblog/stories/textmatebundle.html
#
# npx js-yaml syntaxes/opsi-script.tmLanguage.yaml > syntaxes/opsi-script.tmLanguage.json

scopeName: source.opsi-script
name: opsi-script
uuid: 08cd1012-1f35-44bf-a64a-ebf3f82c8978
fileTypes: [.opsiscript, .ins]
#foldingStartMarker: ^\[[^\]]+\]
#foldingStopMarker: ^\[[^\]]+\]

repository:
  core:
    patterns:
    - include: '#literal-keywords'
    - include: '#expression'

  expression:
    patterns:
    - include: '#support'
    - include: '#comments'
    - include: '#brackets'
    - include: '#section-calls'
    - include: '#literal-operators'
    - include: '#literal-string'
    - include: '#literal-number'
    - include: '#literal-constant'
    - include: '#literal-variable'

    - include: '#sections'

  round-brackets:
    patterns:
    - name: meta.group.braces.round
      begin: \(
      beginCaptures:
        '0': {name: meta.brace.round.opsi-script}
      end: \)
      endCaptures:
        '0': {name: meta.brace.round.opsi-script}
      patterns:
      - include: '#expression'

  brackets:
    patterns:
    - include: '#round-brackets'

  comments:
    patterns:
    - name: comment.line.semicolon.opsi-script
      match: ^(;).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.opsi-script}

  section-calls:
    patterns:
    - name: meta.section-call.without-arguments.opsi-script
      match: (?i)\b(ShellInAnIcon\S+|PatchTextFile\S+)\b
      captures:
        '1': {name: entity.name.function.opsi-script}

  sections:
    patterns:

    - name: meta.function.shellinanicon.opsi-script
      begin: ^(\[)(ShellInAnIcon[^\]]+)(\])
      beginCaptures:
        '1': {name: keyword.other.section-bracket-open.opsi-script}
        '2': {name: entity.name.function.opsi-script}
        '3': {name: keyword.other.section-bracket-close.opsi-script}
      while: ^(?!\[.*\]$)
      contentName: meta.embedded.block.shellscript
      patterns:
      - include: '#literal-variable'
      - include: source.shell

    - name: meta.function.patchtextfile.opsi-script
      begin: ^(\[)(PatchTextFile[^\]]+)(\])
      beginCaptures:
        '1': {name: keyword.other.section-bracket-open.opsi-script}
        '2': {name: entity.name.function.opsi-script}
        '3': {name: keyword.other.section-bracket-close.opsi-script}
      while: ^(?!\[.*\]$)
      patterns:
      - include: '#literal-variable'
      - include: '#support-secsub-patchtextfile'

  literal-keyword-storage:
    patterns:
    - name: storage.type.opsi-script
      match: (?i)(?<!\.)\b(DefVar|DefStringList|Set)\b

  literal-keywords:
    patterns:
    - include: '#literal-keyword-storage'

    - name: keyword.control.opsi-script
      match: (?i)\b(if|else|endif)\b

  literal-operators:
    patterns:
    - name: keyword.operator.wordlike.opsi-script
      #match: (?<!\.)\b(and|or|not)\b
      match: \b(and|or|not)\b

    #- name: keyword.operator.opsi-script
    #  match: (?<!\.)\b(delete|in|instanceof|new|of|typeof|void|with)\b

    #- name: keyword.operator.logical.opsi-script
    #  #match: (?<!\.)\b(and|or|not|==)\b
    #  match: (and|or|not)

    #- name: keyword.operator.assignment.opsi-script
    #  match: >-
    #    (?x)
    #      =(?!=)| # assignment      right-to-left   both

  literal-string:
    patterns:
    - name: string.quoted.single.opsi-script
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.opsi-script}
      end: (')|(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.opsi-script}
        '2': {name: invalid.illegal.newline.opsi-script}
      patterns:
      - include: '#string-content'

    - name: string.quoted.double.opsi-script
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.opsi-script}
      end: (")|(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.opsi-script}
        '2': {name: invalid.illegal.newline.opsi-script}
      patterns:
      - include: '#string-content'

  string-content:
    patterns:
    - name: constant.character.escape.newline.opsi-script
      match: \\\s*\n

    - name: constant.character.escape.js
      match: \\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)

  literal-number:
    patterns:
    - name: constant.numeric.js
      match: (?xi)\b[0-9]+

  literal-constant:
    patterns:
    - name: constant.language.builtin.percent.opsi-script
      match: '(%)[^%]+(%)'
      captures:
        '1': {name: punctuation.percent.opsi-script}
        '2': {name: punctuation.percent.opsi-script}

  literal-variable:
    patterns:
    - name: variable.other.dollar.opsi-script
      match: '(\$)[$\w]+(\$)'
      captures:
        '1': {name: punctuation.dollar.opsi-script}
        '2': {name: punctuation.dollar.opsi-script}
    #- name: variable.other.dollar.opsi-script
    #  match: '(\$)[$\w]+'
    #  captures:
    #    '1': {name: punctuation.dollar.opsi-script}

  support:
    patterns:
    # built-ins # entity.name.function.preprocessor
    - name: support.variable.builtin.opsi-script
      match: (?<!\.)(?i)\b(SetLogLevel)\b
    - name: support.function.builtin.logging.opsi-script
      match: (?<!\.)(?i)\b(comment|LogError|isFatalError)\b
    - name: support.function.builtin.list.opsi-script
      match: (?<!\.)(?i)\b(takeString|getValue)\b
    - name: support.function.builtin.string.opsi-script
      match: (?<!\.)(?i)\b(asConfidential|strPart|strLength|isRegexMatch)\b
    - name: support.function.builtin.numeric.opsi-script
      match: (?<!\.)(?i)\b(calculate)\b
    - name: support.function.builtin.service.opsi-script
      match: (?<!\.)(?i)\b(GetProductProperty)\b
    - name: support.function.builtin.subprocess.opsi-script
      match: (?<!\.)(?i)\b(ShellCall|GetLastExitcode)\b

  support-secsub-patchtextfile:
    patterns:
    - name: support.function.builtin.secsub.patchtextfile.opsi-script
      match: (?<!\.)(?i)\b(FindLine_Containing|DeleteTheLine|InsertLine)\b

patterns:
  - include: '#core'

